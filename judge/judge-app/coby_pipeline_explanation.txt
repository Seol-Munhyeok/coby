# COBY 프로젝트 CI/CD 파이프라인 아키텍처 설명

## 최종 목표
- GitHub `main` 브랜치에 코드를 Push하면, AWS 파이프라인을 통해 EC2에 React 및 Spring Boot 애플리케이션이 자동으로 배포된다.

## 전체 프로세스 흐름 (요약)
1.  **개발자**가 로컬에서 작업한 코드를 `main` 브랜치로 Push합니다.
2.  **GitHub Actions**가 Push 이벤트를 감지하고, 소스 코드 전체를 압축하여 `source.zip` 파일로 만든 뒤 **Amazon S3** 버킷에 업로드합니다.
3.  **GitHub Actions**가 **AWS CodePipeline**의 실행을 트리거합니다.
4.  **CodePipeline**의 'Source' 단계가 **S3**에 업로드된 `source.zip`을 감지하고 가져옵니다.
5.  **CodePipeline**이 `source.zip`을 'Build' 단계의 **AWS CodeBuild** 프로젝트에 전달합니다.
6.  **CodeBuild**는 `buildspec.yml` 파일의 명세에 따라 코드를 빌드하고(npm, gradlew), 빌드 결과물과 배포 스크립트(`appspec.yml`, `scripts/`)를 `build_output.zip`으로 패키징하여 다시 **S3**에 업로드합니다.
7.  **CodePipeline**이 `build_output.zip`을 'Deploy' 단계의 **AWS CodeDeploy**에 전달합니다.
8.  **CodeDeploy**는 `appspec.yml` 파일의 명세에 따라 **Amazon EC2** 인스턴스에서 배포 스크립트를 순차적으로 실행하여 애플리케이션을 최종 배포합니다.

---

## 각 AWS 서비스의 구체적인 역할

### 1. GitHub Actions (트리거 및 시작점)
- **역할:** CI/CD 프로세스를 시작하는 방아쇠입니다.
- **주요 작업:**
    - `main` 브랜치로 코드가 Push되는 이벤트를 감지합니다.
    - 리포지토리의 모든 소스 코드를 `source.zip` 파일로 압축합니다.
    - 압축된 `source.zip` 파일을 **Amazon S3** 버킷에 업로드합니다.
    - **AWS CodePipeline**의 실행을 명시적으로 트리거하여 전체 배포 프로세스를 시작시킵니다.

### 2. Amazon S3 (아티팩트 저장소)
- **역할:** 파이프라인의 여러 단계에서 생성되는 파일(아티팩트)을 저장하는 중앙 저장소입니다.
- **주요 작업:**
    - **소스 아티팩트 저장:** GitHub Actions가 업로드한 원본 소스 코드(`source.zip`)를 보관합니다. 이는 CodePipeline 'Source' 단계의 입력물이 됩니다.
    - **빌드 아티팩트 저장:** CodeBuild가 빌드를 완료한 후 생성한 배포용 패키지(`build_output.zip`)를 보관합니다. 이는 CodePipeline 'Deploy' 단계의 입력물이 됩니다.

### 3. AWS CodePipeline (오케스트레이터)
- **역할:** 전체 CI/CD 프로세스를 총괄하고 자동화하는 워크플로우 서비스입니다.
- **주요 작업:**
    - **Source 단계:** **S3**에서 `source.zip` 파일을 가져와 다음 단계로 전달합니다.
    - **Build 단계:** 소스 코드를 **CodeBuild** 프로젝트에 전달하여 빌드를 지시합니다.
    - **Deploy 단계:** 빌드가 완료된 결과물을 **CodeDeploy**에 전달하여 배포를 지시합니다.
    - 각 단계의 성공/실패를 추적하고 전체 프로세스의 흐름을 시각적으로 보여주며 관리합니다.

### 4. AWS CodeBuild (빌드 및 테스트 서버)
- **역할:** 소스 코드를 실행 가능한 애플리케이션으로 변환하는 서버리스 빌드 서비스입니다.
- **주요 작업:**
    - `buildspec.yml` 파일을 읽어 빌드 명령을 순차적으로 실행합니다.
    - **Secrets Manager**와 연동하여 DB 자격증명과 같은 민감한 정보를 안전하게 가져와 빌드 시점에 환경 변수로 주입합니다.
    - React 프론트엔드(`npm run build`)와 Spring Boot 백엔드(`./gradlew build`)를 빌드합니다.
    - 빌드 완료 후, `post_build` 단계에서 배포에 필요한 파일들(React 빌드 결과, Spring Boot JAR 파일, `appspec.yml`, `scripts` 폴더)을 `build_output` 폴더에 정리합니다.
    - 최종 결과물을 `build_output.zip`으로 압축하여 **S3**에 업로드합니다.

### 5. AWS CodeDeploy (자동 배포 서비스)
- **역할:** 빌드된 애플리케이션을 EC2 인스턴스에 자동으로 배포합니다.
- **주요 작업:**
    - **EC2**에 설치된 CodeDeploy 에이전트를 통해 배포 프로세스를 수행합니다.
    - CodePipeline으로부터 전달받은 `build_output.zip` 파일을 **EC2**에 다운로드하고 압축을 해제합니다.
    - 압축 해제된 폴더에서 `appspec.yml` 파일을 찾아 명세대로 배포 수명 주기(Hooks)를 실행합니다.
    - `appspec.yml`의 지시에 따라 `scripts` 폴더 안의 셸 스크립트(`stop_server.sh`, `clean_up.sh`, `setup_nginx.sh`, `start_server.sh`)를 순서대로 실행하여 애플리케이션을 중지, 정리, 설정, 시작합니다.

### 6. Amazon EC2 (애플리케이션 서버)
- **역할:** 최종적으로 사용자가 접근하는 웹 애플리케이션(React, Spring Boot)이 실행되는 가상 서버입니다.
- **주요 작업:**
    - CodeDeploy 에이전트가 설치되어 있어 배포 명령을 수신하고 실행합니다.
    - Nginx 웹 서버가 리버스 프록시로 동작하여, 사용자의 요청을 React 프론트엔드(`/`) 또는 Spring Boot 백엔드 API(`/api`)로 라우팅합니다.
    - 실제 Spring Boot JAR 파일이 백그라운드에서 실행되는 환경입니다.

### 7. 기타 핵심 서비스
- **AWS IAM (Identity and Access Management):** 각 AWS 서비스들이 서로에게 접근할 때 필요한 권한을 정의하고 관리하여 파이프라인이 안전하게 동작하도록 합니다.
- **AWS Secrets Manager:** 데이터베이스 암호와 같은 민감한 정보를 코드와 분리하여 안전하게 저장하고, 필요시 IAM 권한을 통해 제어된 접근을 허용합니다.
