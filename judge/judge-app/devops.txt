# DevOps CI/CD 파이프라인 구축 현황 및 계획 (React + Spring Boot)

## 최종 목표
- GitHub `main` 브랜치에 코드 Push 시, GitHub Actions와 AWS CI/CD 서비스를 통해 EC2에 React와 Spring Boot 애플리케이션을 자동 배포한다.

---

## A. 완료된 작업 (Phase 1 & 2)

### 1. AWS 인프라 준비
- **IAM 사용자 (for GitHub Actions):**
  - 이름: `github-actions-user`
  - 권한: `s3:PutObject` (S3 업로드), `codepipeline:StartPipelineExecution` (파이프라인 실행)
  - `Access Key`와 `Secret Key`를 발급하여 GitHub Actions Secrets에 저장 완료.
- **EC2 인스턴스 (Ubuntu):**
  - Ubuntu 서버 생성 완료.
  - 필수 소프트웨어 (OpenJDK 17, Nginx, CodeDeploy Agent) 설치 완료.
  - IAM 역할 (`EC2-S3-CodeDeploy-Role`) 연결 완료 (권한: `AmazonS3ReadOnlyAccess`).
  - 보안 그룹 설정 완료 (포트 22, 80, 8080 인바운드 허용).
- **S3 버킷:**
  - 소스코드(.zip)와 빌드 결과물(artifact)을 저장할 프라이빗 S3 버킷 생성 완료.
- **AWS Secrets Manager:**
  - 애플리케이션이 사용할 DB 자격증명 (DB_URL, DB_USERNAME, DB_PASSWORD)을 저장 완료.

### 2. 로컬 프로젝트 및 GitHub 설정
- **`appspec.yml` (루트 디렉토리):**
  - CodeDeploy 배포 명세서 작성 완료.
  - 빌드 결과물을 EC2의 `/home/ubuntu/app`으로 복사하도록 설정.
  - 배포 단계별 Hooks (`ApplicationStop`, `BeforeInstall`, `AfterInstall`, `ApplicationStart`) 및 실행 스크립트 경로 지정 완료.
- **배포 스크립트 (`/scripts` 폴더):**
  - `stop_server.sh`: 기존 앱 종료 스크립트.
  - `clean_up.sh`: 이전 배포 파일 정리 스크립트.
  - `setup_nginx.sh`: Nginx 리버스 프록시 설정 스크립트.
  - `start_server.sh`: React 파일 복사 및 Spring Boot 앱 실행 스크립트.
  - 모든 스크립트 작성 완료.
- **`buildspec.yml` (루트 디렉토리):**
  - CodeBuild 빌드 명세서 작성 완료.
  - `secrets-manager` 연동을 통해 빌드 시점에 DB 접속 정보를 환경변수로 주입하도록 설정.
  - 빌드 단계(install, pre_build, build, post_build) 정의 완료.
  - React(yarn build) 및 Spring Boot(gradlew build) 빌드 명령어 지정.
  - 최종 결과물(Artifact)을 `build_output` 폴더 기준으로 패키징하도록 설정.
- **GitHub Actions 워크플로우 (`.github/workflows/main.yml`):**
  - `main` 브랜치 push 트리거 설정 완료.
  - 소스코드 압축, S3 업로드, CodePipeline 실행까지의 자동화 로직 작성 완료.
  - AWS 자격증명은 GitHub Secrets를 통해 안전하게 참조하도록 설정.

---

## B. 진행할 작업 (Phase 3)

### 1. AWS CodeDeploy 설정
- **애플리케이션 생성:** CodeDeploy에서 `coby-app` (예시) 이름으로 새 애플리케이션을 생성한다. (컴퓨팅 플랫폼: EC2/온프레미스)
- **배포 그룹 생성:**
  - 생성한 애플리케이션 내에 배포 그룹을 생성한다.
  - 서비스 역할(IAM Role)을 지정한다. (CodeDeploy를 위한 역할)
  - 배포할 EC2 인스턴스를 태그(Tag)를 기준으로 지정한다.
  - CodeDeploy Agent 설치 및 로드 밸런싱 설정은 건너뛴다.

### 2. AWS CodeBuild 프로젝트 생성
- **프로젝트 생성:**
  - 소스 공급자: `AWS CodePipeline`
  - 환경 이미지: `관리형 이미지`, OS: `Ubuntu`, 런타임: `Standard`, 이미지 버전: `최신`
  - 서비스 역할(IAM Role): CodeBuild를 위한 새 IAM 역할을 생성하거나 기존 역할을 선택한다.
    - **중요:** 이 역할에는 S3 읽기/쓰기, CloudWatch Logs 권한 외에, `buildspec.yml`에서 정의한 **Secrets Manager의 보안 암호에 접근할 수 있는 `secretsmanager:GetSecretValue` 권한**을 반드시 추가해야 한다.
  - 빌드 사양(Buildspec): `buildspec.yml 파일 사용`을 선택한다.

### 3. AWS CodePipeline 파이프라인 생성
- **파이프라인 생성:**
  - **Source 단계:**
    - 소스 공급자: `Amazon S3`
    - S3 버킷 이름과 객체 키(`source.zip`)를 지정한다.
    - 변경 감지 옵션: `Amazon CloudWatch Events (권장)`
  - **Build 단계:**
    - 빌드 공급자: `AWS CodeBuild`
    - 위에서 생성한 CodeBuild 프로젝트를 선택한다.
  - **Deploy 단계:**
    - 배포 공급자: `AWS CodeDeploy`
    - 위에서 생성한 CodeDeploy 애플리케이션과 배포 그룹을 선택한다.

### 4. 최종 테스트
- 모든 파이프라인 구성이 완료된 후, 로컬에서 코드의 작은 부분을 수정하고 `main` 브랜치에 `push`한다.
- GitHub Actions의 실행, CodePipeline의 각 단계(Source -> Build -> Deploy) 진행 상황을 모니터링하고 최종적으로 EC2에 변경 사항이 성공적으로 배포되었는지 확인한다.
