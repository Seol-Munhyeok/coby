# SQS + Lambda 기반 서버리스 채점 시스템 아키텍처 흐름

이 문서는 AWS SQS와 Lambda를 사용하여 확장 가능하고 안정적인 자동 채점 시스템을 구축하는 전체 데이터 흐름과 각 구성 요소의 역할을 설명합니다.

---

### 1단계: 백엔드 서버 (API Gateway) - 요청 접수 및 작업 생성

1.  **요청 수신:** 클라이언트로부터 다음 정보를 포함하는 채점 요청을 받습니다.
    *   `problem_id` (문제 식별자)
    *   `user_id` (사용자 식별자)
    *   `source_code` (사용자가 작성한 소스 코드)

2.  **인증/인가 (Authentication/Authorization):**
    *   요청을 보낸 `user_id`가 유효한 사용자인지, 해당 `problem_id`에 대한 제출 권한이 있는지 확인합니다.

3.  **S3에 소스 코드 저장:**
    *   받은 `source_code`를 AWS S3 버킷의 고유한 경로에 업로드합니다.
    *   **경로 예시:** `s3://[버킷이름]/submissions/[제출ID]/Main.py`
    *   여기서 `[제출ID]`는 데이터베이스(RDS)에 새로 생성한 Submission 레코드의 고유 키(PK)를 사용하는 것이 좋습니다.

4.  **SQS 메시지 생성:**
    *   Lambda 함수에 전달할 작업 정보를 담은 JSON 메시지를 구성합니다. 이 메시지에는 실제 데이터가 아닌, 데이터를 찾기 위한 **메타데이터(Metadata)**만 포함됩니다.
    *   **메시지 내용 예시:**
      ```json
      {
        "submission_id": "db-generated-submission-pk",
        "problem_id": "problem-101",
        "user_id": "user-abc-123",
        "s3_code_path": "s3://[버킷이름]/submissions/[제출ID]/Main.py"
      }
      ```

5.  **SQS 큐로 메시지 전송:**
    *   AWS SDK (e.g., boto3 for Python, AWS SDK for Java/JS)를 사용하여 생성된 메시지를 지정된 SQS 큐로 보냅니다.
    *   이 작업 후, 백엔드 서버의 역할은 일단락됩니다. 클라이언트에게는 "채점 요청이 성공적으로 접수되었습니다" 라는 응답을 즉시 보낼 수 있습니다.

---

### **2단계: SQS와 Lambda의 자동 연동**

*   이 단계는 AWS 인프라 설정에 해당하며, 코드로 구현하는 부분이 아닙니다.
*   AWS 콘솔 또는 IaC(Infrastructure as Code) 도구를 사용하여 SQS 큐와 Lambda 함수 사이에 **트리거(Trigger)**를 설정합니다.
*   **설정 내용:** "해당 SQS 큐에 메시지가 도착하면, 지정된 Lambda 함수를 실행하라."
*   **동작:** SQS에 메시지가 100개가 동시에 들어오면, AWS는 Lambda 함수의 실행 환경(인스턴스)을 100개를 동시에 생성하여 병렬로 처리합니다. 개발자는 병렬 처리를 전혀 신경 쓸 필요가 없습니다.

---

### **3단계: Lambda 함수 - 실제 컴파일 및 채점 작업 수행**

1.  **메시지 수신 및 파싱:**
    *   Lambda 함수는 트리거 이벤트(event) 객체를 통해 SQS 메시지를 전달받습니다.
    *   이벤트 객체에서 `submission_id`, `problem_id`, `s3_code_path` 등의 정보를 추출합니다.

2.  **임시 작업 공간 생성:**
    *   Lambda 실행 환경 내에서 유일하게 쓰기 가능한 공간인 `/tmp` 디렉토리 아래에 고유한 작업 폴더를 생성합니다.
    *   **폴더 예시:** `/tmp/[submission_id]/`

3.  **필요 데이터 준비 (S3 & RDS):**
    *   **소스 코드 다운로드:** `s3_code_path` 정보를 이용해 S3에서 소스 코드를 임시 작업 폴더로 다운로드합니다. (예: `/tmp/[submission_id]/Main.py`)
    *   **테스트케이스/정답 조회:** `problem_id`를 키로 사용하여 **RDS 데이터베이스에 직접 연결**하고, 해당 문제의 테스트케이스와 정답 데이터를 조회합니다. (Lambda 함수는 RDS가 속한 VPC에 연결되도록 네트워크 설정이 필요합니다.)
    *   **임시 파일 생성:** RDS에서 가져온 테스트케이스/정답 문자열 데이터를 `run.sh` 스크립트가 읽을 수 있도록 임시 작업 폴더 안에 파일로 저장합니다. (예: `/tmp/[submission_id]/testcase.txt`, `/tmp/[submission_id]/result.txt`)

4.  **컴파일 및 채점 실행:**
    *   임시 작업 폴더에 모든 파일이 준비되면, `subprocess` 모듈을 사용하여 미리 Lambda 컨테이너에 설치해 둔 `run.sh` 스크립트를 실행합니다.
    *   `run.sh`는 Lambda 컨테이너에 설치된 GCC, JDK, Python 등을 사용하여 코드를 컴파일하고 실행합니다.

5.  **결과 처리 및 통보:**
    *   `run.sh` 스크립트의 실행 결과(stdout)를 파싱하여 "Pass", "Fail", "TimeOut" 등의 채점 결과와 실행 시간, 메모리 사용량 등을 얻습니다.
    *   처리된 최종 결과를 백엔드 서버에 다시 알려주어 데이터베이스 상태를 업데이트합니다.
    *   **통보 방식 (아래 중 택 1 또는 조합):**
        *   **API 호출 (Webhook):** 가장 일반적인 방식으로, 백엔드 서버의 결과 처리 API(예: `POST /api/v1/submissions/result`)를 직접 호출합니다.
        *   **다른 SQS 큐 사용:** "채점 완료" 큐에 결과 메시지를 보내면, 백엔드 서버의 다른 프로세스가 이를 처리합니다.
        *   **RDS 직접 업데이트:** Lambda 함수가 직접 RDS의 Submission 테이블에 접속하여 채점 결과를 업데이트합니다.
